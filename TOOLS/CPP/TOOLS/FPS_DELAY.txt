bool DKSleep(float deltaTime, float wait_time, float& sleepBuffer)
{
	sleepBuffer += deltaTime; // Накапливаем время
	// Если накопленное время больше или равно времени ожидания
	if (sleepBuffer >= wait_time) {
		sleepBuffer = 0.0f; // Сбрасываем накопленное время
		return true; // Время ожидания истекло, возвращаем true
	}
	return false; // Время ожидания не истекло, возвращаем false
}

std::chrono::high_resolution_clock::time_point previousTime = std::chrono::high_resolution_clock::now();
float SleepBuffer = 0.0f;


Events::drawHudEvent += []
		{
			//--calc fps
			std::chrono::high_resolution_clock::time_point currentTime = std::chrono::high_resolution_clock::now();
			std::chrono::duration<float> deltaTime = std::chrono::duration_cast<std::chrono::duration<float>>(currentTime - previousTime);
			previousTime = currentTime;
			
			if (DKSleep(deltaTime.count(), delayDuration, SleepBuffer)) { canSetWantedLevel = true; } // true когда таймер выйдет
			
		}